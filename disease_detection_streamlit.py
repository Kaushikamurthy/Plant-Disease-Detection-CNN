import streamlit as st
import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import io
import numpy as np

class AdvancedPlantClassifier(nn.Module):
    def __init__(self, num_classes=38):
        super(AdvancedPlantClassifier, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2),
            
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2),
            
            nn.Conv2d(128, 256, kernel_size=3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(2, 2)
        )
        
        self.classifier = nn.Sequential(
            nn.AdaptiveAvgPool2d((1, 1)),
            nn.Flatten(),
            nn.Dropout(0.5),
            nn.Linear(256, 512),
            nn.ReLU(inplace=True),
            nn.Dropout(0.3),
            nn.Linear(512, num_classes)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x
    
CLASS_NAMES = [
    "Apple___Apple_scab", "Apple___Black_rot", "Apple___Cedar_apple_rust", "Apple___healthy",
    "Blueberry___healthy", "Cherry_(including_sour)___Powdery_mildew", "Cherry_(including_sour)___healthy",
    "Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot", "Corn_(maize)___Common_rust_",
    "Corn_(maize)___Northern_Leaf_Blight", "Corn_(maize)___healthy", "Grape___Black_rot",
    "Grape___Esca_(Black_Measles)", "Grape___Leaf_blight_(Isariopsis_Leaf_Spot)", "Grape___healthy",
    "Orange___Haunglongbing_(Citrus_greening)", "Peach___Bacterial_spot", "Peach___healthy",
    "Pepper,_bell___Bacterial_spot", "Pepper,_bell___healthy", "Potato___Early_blight", "Potato___Late_blight",
    "Potato___healthy", "Raspberry___healthy", "Soybean___healthy", "Squash___Powdery_mildew",
    "Strawberry___Leaf_scorch", "Strawberry___healthy", "Tomato___Bacterial_spot", "Tomato___Early_blight",
    "Tomato___Late_blight", "Tomato___Leaf_Mold", "Tomato___Septoria_leaf_spot",
    "Tomato___Spider_mites Two-spotted_spider_mite", "Tomato___Target_Spot",
    "Tomato___Tomato_Yellow_Leaf_Curl_Virus", "Tomato___Tomato_mosaic_virus", "Tomato___healthy"
]

def load_model(model_path):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = AdvancedPlantClassifier(num_classes=38)
    model.load_state_dict(torch.load(model_path, map_location=device))
    model.eval()
    return model

def process_image(image):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    return transform(image).unsqueeze(0)

def get_prediction(model, image_tensor):
    with torch.no_grad():
        outputs = model(image_tensor)
        probabilities = torch.nn.functional.softmax(outputs, dim=1)
        _, predicted = torch.max(outputs, 1)
    return predicted.item(), probabilities[0]

translations = {
    "English": {
        "about": "**Project Scope:**\n- Develop an end-to-end plant disease detection system.\n- Provide a tool for farmers to quickly diagnose plant diseases.\n- Implement a CNN model for classification and compare its performance with pre-trained models.",
        "usage": "**How to Use**\n1. Upload a clear image of a plant leaf.\n2. Click the 'Detect Disease' button.\n3. View the results and predictions.",
        "plants": "**Supported Plants**\n- Apple\n- Blueberry\n- Cherry\n- Corn (Maize)\n- Grape\n- Orange\n- Peach\n- Pepper\n- Potato\n- Raspberry\n- Soybean\n- Squash\n- Strawberry\n- Tomato",
        "title": "ЁЯМ┐ Plant Disease Detection System",
        "write": "Upload a leaf image to detect plant diseases",
        "model_success": "тЬЕ Model loaded successfully!",
        "choose_image": "Choose an image...",
        "detect_button": "Detect Disease",
        "detection_results": "Detection Results",
        "healthy_message": "тЬЕ Plant appears to be healthy!",
        "disease_warning": "тЪая╕П Plant may have a disease."
    },
    "Tamil": {
        "about": "**родро┐роЯрпНроЯроорпН:**\n- роорпБро┤рпБроорпИропро╛рой родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐ропрпБроорпН роЕроорпИрокрпНрокрпИ роЙро░рпБро╡ро╛роХрпНроХрпБродро▓рпН.\n- ро╡ро┐ро╡роЪро╛ропро┐роХро│рпН ро╡ро┐ро░рпИро╡ро┐ро▓рпН роирпЛропрпНроХро│рпИ роХрогрпНроЯро▒ро┐роп роЙродро╡рпБродро▓рпН.\n- ро╡роХрпИрокрпНрокроЯрпБродрпНрод рооро▒рпНро▒рпБроорпН роЪрпЖропро▓рпНродро┐ро▒ройрпИ роТрокрпНрокро┐роЯ CNN рооро╛родро┐ро░ро┐ рокропройрпНрокроЯрпБродрпНродрпБродро▓рпН.",
        "usage": "**роОрокрпНрокроЯро┐ рокропройрпНрокроЯрпБродрпНродрпБро╡родрпБ**\n1. родро╛ро╡ро░ роЗро▓рпИ рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.\n2. 'роирпЛропрпИроХрпН роХрогрпНроЯро▒ро┐' рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН.\n3. роорпБроЯро┐ро╡рпБроХро│рпИ рокро╛ро░рпНроХрпНроХро╡рпБроорпН.",
        "plants": "**роЖродро░ро┐роХрпНроХрокрпНрокроЯрпБроорпН родро╛ро╡ро░роЩрпНроХро│рпН**\n- роЖрокрпНрокро┐ро│рпН\n- рокрпБро│рпВрокрпЖро░ро┐\n- роЪрпЖро░рпНро░ро┐\n- роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН\n- родро┐ро░ро╛роЯрпНроЪрпИ\n- роЖро░роЮрпНроЪрпБ\n- рокрпАроЪрпН\n- рооро┐ро│роХрпБ\n- роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ\n- ро░ро╛ро╕рпНрокрпЖро░ро┐\n- роЪрпЛропро╛рокрпАройрпН\n- ро╕рпНроХрпНро╡ро╛ро╖рпН\n- ро╕рпНроЯрпНро░ро╛рокрпЖро░ро┐\n- родроХрпНроХро╛ро│ро┐",
        "title": "ЁЯМ┐ родро╛ро╡ро░ роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН роЕроорпИрокрпНрокрпБ",
        "write": "родро╛ро╡ро░ роирпЛропрпНроХро│рпИ роХрогрпНроЯро▒ро┐роп роТро░рпБ роЗро▓рпИропро┐ройрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН",
        "model_success": "тЬЕ рооро╛родро┐ро░ро┐ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роПро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ!",
        "choose_image": "роТро░рпБ рокроЯродрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН...",
        "detect_button": "роирпЛропрпИроХрпН роХрогрпНроЯро▒ро┐",
        "detection_results": "роХрогрпНроЯро▒ро┐роирпНрод роорпБроЯро┐ро╡рпБроХро│рпН",
        "healthy_message": "тЬЕ родро╛ро╡ро░роорпН роЖро░рпЛроХрпНроХро┐ропрооро╛роХ роЗро░рпБроХрпНроХро┐ро▒родрпБ!",
        "disease_warning": "тЪая╕П родро╛ро╡ро░родрпНродро┐ро▓рпН роирпЛропрпН роЗро░рпБроХрпНроХро▓ро╛роорпН."
    },
    "Kannada": {
        "about": "**р▓пр│Лр▓Ьр▓ир│Жр▓п р▓╡р│Нр▓пр▓╛р▓кр│Нр▓др▓┐:**\n- р▓╕р▓Вр▓кр│Вр▓░р│Нр▓г р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж р▓Ер▓нр▓┐р▓╡р│Гр▓жр│Нр▓зр▓┐р▓кр▓бр▓┐р▓╕р▓┐.\n- р▓░р│Ир▓др▓░р│Б р▓мр│Зр▓Чр▓ир│Ж р▓░р│Лр▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р▓▓р│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓┐.\n- CNN р▓ор▓╛р▓жр▓░р▓┐р▓пр▓ир│Нр▓ир│Б р▓Ьр▓╛р▓Чр▓др▓┐р▓Х р▓ор▓╛р▓жр▓░р▓┐р▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓╣р│Лр▓▓р▓┐р▓╕р▓┐.",
        "usage": "**р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓мр▓│р▓╕р│Бр▓╡р│Бр▓жр│Б**\n1. р▓╕р▓╕р│Нр▓п р▓Ор▓▓р│Жр▓п р▓╕р│Нр▓кр▓╖р│Нр▓Я р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│Нр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐.\n2. 'р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж' р▓мр▓Яр▓ир│Н р▓Тр▓др│Нр▓др▓┐р▓░р▓┐.\n3. р▓лр▓▓р▓┐р▓др▓╛р▓Вр▓╢р▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓┐.",
        "plants": "**р▓мр│Жр▓Вр▓мр▓▓р▓┐р▓д р▓╕р▓╕р│Нр▓пр▓Чр▓│р│Б**\n- р▓Жр▓кр▓▓р│Н\n- р▓мр│Нр▓▓р│Вр▓мр│Жр▓░р▓┐\n- р▓Ър│Жр▓░р▓┐\n- р▓Ьр│Лр▓│\n- р▓жр│Нр▓░р▓╛р▓Хр│Нр▓╖р▓┐\n- р▓Хр▓┐р▓др│Нр▓др▓│р│Ж\n- р▓кр│Ар▓Ър│Н\n- р▓ор│Жр▓гр▓╕р│Б\n- р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж\n- р▓╣р▓┐р▓Вр▓мр│Жр▓░р│Нр▓░р▓┐\n- р▓╕р│Лр▓пр▓╛р▓мр│Ар▓ир│Н\n- р▓╕р│Нр▓Хр│Нр▓╡р▓╛р▓╢р│Н\n- р▓╕р│Нр▓Яр│Нр▓░р▓╛р▓мр│Жр▓░р▓┐\n- р▓Яр│Кр▓ор│Нр▓пр▓╛р▓Яр│Л",
        "title": "ЁЯМ┐ р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж р▓╡р│Нр▓пр▓╡р▓╕р│Нр▓ер│Ж",
        "write": "р▓╕р▓╕р│Нр▓п р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж р▓ор▓╛р▓бр▓▓р│Б р▓Ор▓▓р│Ж р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓┐",
        "model_success": "тЬЕ р▓ор▓╛р▓жр▓░р▓┐ р▓пр▓╢р▓╕р│Нр▓╡р▓┐р▓пр▓╛р▓Чр▓┐ р▓▓р│Лр▓бр│Н р▓ор▓╛р▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж!",
        "choose_image": "р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐...",
        "detect_button": "р▓░р│Лр▓Ч р▓кр▓др│Нр▓др│Ж",
        "detection_results": "р▓кр▓др│Нр▓др│Жр▓п р▓лр▓▓р▓┐р▓др▓╛р▓Вр▓╢р▓Чр▓│р│Б",
        "healthy_message": "тЬЕ р▓╕р▓╕р│Нр▓п р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░р▓╡р▓╛р▓Чр▓┐р▓жр│Ж!",
        "disease_warning": "тЪая╕П р▓╕р▓╕р│Нр▓пр▓Хр│Нр▓Хр│Ж р▓░р│Лр▓Ч р▓Зр▓жр│Нр▓жр▓┐р▓░р▓мр▓╣р│Бр▓жр│Б."
    },
    "Hindi": {
        "about": "**рдкрд░рд┐рдпреЛрдЬрдирд╛ рдХрд╛ рджрд╛рдпрд░рд╛:**\n- рдкреМрдзреЛрдВ рдХреЗ рд░реЛрдЧреЛрдВ рдХрд╛ рд╕рдВрдкреВрд░реНрдг рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА рд╡рд┐рдХрд╕рд┐рдд рдХрд░рдирд╛ред\n- рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╢реАрдШреНрд░ рдирд┐рджрд╛рди рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдирд╛ред\n- CNN рдореЙрдбрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╡рд░реНрдЧреАрдХрд░рдг рдХрд░рдирд╛ред",
        "usage": "**рдХреИрд╕реЗ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ**\n1. рдкреМрдзреЗ рдХреА рдкрддреНрддреА рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред\n2. 'рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреЗрдВ' рдмрдЯрди рджрдмрд╛рдПрдВред\n3. рдкрд░рд┐рдгрд╛рдо рджреЗрдЦреЗрдВред",
        "plants": "**рд╕рдорд░реНрдерд┐рдд рдкреМрдзреЗ**\n- рд╕реЗрдм\n- рдмреНрд▓реВрдмреЗрд░реА\n- рдЪреЗрд░реА\n- рдордХрдИ\n- рдЕрдВрдЧреВрд░\n- рд╕рдВрддрд░рд╛\n- рдЖрдбрд╝реВ\n- рдорд┐рд░реНрдЪ\n- рдЖрд▓реВ\n- рд░рд╛рд╕реНрдкрдмреЗрд░реА\n- рд╕реЛрдпрд╛рдмреАрди\n- рд╕реНрдХреНрд╡реИрд╢\n- рд╕реНрдЯреНрд░реЙрдмреЗрд░реА\n- рдЯрдорд╛рдЯрд░",
        "title": "ЁЯМ┐ рдкреМрдзрд╛ рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА",
        "write": "рдкреМрдзреЗ рдХреА рдмреАрдорд╛рд░реА рдХрд╛ рдкрддрд╛ рд▓рдЧрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдкрддреНрддреЗ рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "model_success": "тЬЕ рдореЙрдбрд▓ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЛрдб рд╣реБрдЖ!",
        "choose_image": "рдПрдХ рдЫрд╡рд┐ рдЪреБрдиреЗрдВ...",
        "detect_button": "рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреЗрдВ",
        "detection_results": "рдкрд╣рдЪрд╛рди рдкрд░рд┐рдгрд╛рдо",
        "healthy_message": "тЬЕ рдкреМрдзрд╛ рд╕реНрд╡рд╕реНрде рджрд┐рдЦ рд░рд╣рд╛ рд╣реИ!",
        "disease_warning": "тЪая╕П рдкреМрдзреЗ рдореЗрдВ рдмреАрдорд╛рд░реА рд╣реЛ рд╕рдХрддреА рд╣реИред"
    }
}


def main():
    st.set_page_config(page_title="Plant Disease Detection", layout="wide")
    
    language = st.sidebar.radio("Select Language / роорпКро┤ро┐ропрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН / р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Ж р▓ор▓╛р▓бр▓┐ / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:", list(translations.keys()))
    
    st.sidebar.title("тД╣я╕П About the Project")
    st.sidebar.markdown(translations[language]["about"])
    
    st.sidebar.title("ЁЯУМ How to Use")
    st.sidebar.markdown(translations[language]["usage"])
    
    st.sidebar.title("ЁЯМ▒ Supported Plants")
    st.sidebar.markdown(translations[language]["plants"])
    
    st.title(translations[language]["title"])
    st.write(translations[language]["write"])
    
    try:
        model = load_model(r"C:\Users\user\Desktop\guvi\plant disease\plant_disease_model_acc_0.9335.pth")
        st.success(translations[language]["model_success"])
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        return

    uploaded_file = st.file_uploader(translations[language]["choose_image"], type=["jpg", "jpeg", "png"])
    

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        if st.button(translations[language]["detect_button"]):
            with st.spinner("Analyzing image..."):
                image_tensor = process_image(image)
                prediction_idx, probabilities = get_prediction(model, image_tensor)

                main_prediction = CLASS_NAMES[prediction_idx]
                plant_name, condition = main_prediction.split('___')

                st.subheader(translations[language]["detection_results"])
                st.markdown(f"**Plant (родро╛ро╡ро░роорпН | р▓╕р▓╕р│Нр▓п | рдкреМрдзрд╛):** {plant_name}")
                st.markdown(f"**Condition (роиро┐ро▓рпИ | р▓кр▓░р▓┐р▓╕р│Нр▓ер▓┐р▓др▓┐ | рд╕реНрдерд┐рддрд┐):** {condition.replace('_', ' ')}")
                st.markdown(f"**Confidence (роироорпНрокро┐роХрпНроХрпИ | р▓ир▓Вр▓мр▓┐р▓Хр│Ж | рд╡рд┐рд╢реНрд╡рд╛рд╕):** {probabilities[prediction_idx]*100:.2f}%")


                if "healthy" in condition.lower():
                    st.success(translations[language]["healthy_message"])
                else:
                    st.warning(translations[language]["disease_warning"])
    
if __name__ == "__main__":
    main()